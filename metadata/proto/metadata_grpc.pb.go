// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetadataClient is the client API for Metadata service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetadataClient interface {
	ListFeatures(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Metadata_ListFeaturesClient, error)
	CreateFeatureVariant(ctx context.Context, in *FeatureVariant, opts ...grpc.CallOption) (*Empty, error)
	GetFeatures(ctx context.Context, opts ...grpc.CallOption) (Metadata_GetFeaturesClient, error)
	GetFeatureVariants(ctx context.Context, opts ...grpc.CallOption) (Metadata_GetFeatureVariantsClient, error)
	ListLabels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Metadata_ListLabelsClient, error)
	CreateLabelVariant(ctx context.Context, in *LabelVariant, opts ...grpc.CallOption) (*Empty, error)
	GetLabels(ctx context.Context, opts ...grpc.CallOption) (Metadata_GetLabelsClient, error)
	GetLabelVariants(ctx context.Context, opts ...grpc.CallOption) (Metadata_GetLabelVariantsClient, error)
	ListTrainingSets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Metadata_ListTrainingSetsClient, error)
	CreateTrainingSetVariant(ctx context.Context, in *TrainingSetVariant, opts ...grpc.CallOption) (*Empty, error)
	GetTrainingSets(ctx context.Context, opts ...grpc.CallOption) (Metadata_GetTrainingSetsClient, error)
	GetTrainingSetVariants(ctx context.Context, opts ...grpc.CallOption) (Metadata_GetTrainingSetVariantsClient, error)
	ListSources(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Metadata_ListSourcesClient, error)
	CreateSourceVariant(ctx context.Context, in *SourceVariant, opts ...grpc.CallOption) (*Empty, error)
	GetSources(ctx context.Context, opts ...grpc.CallOption) (Metadata_GetSourcesClient, error)
	GetSourceVariants(ctx context.Context, opts ...grpc.CallOption) (Metadata_GetSourceVariantsClient, error)
	ListUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Metadata_ListUsersClient, error)
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error)
	GetUsers(ctx context.Context, opts ...grpc.CallOption) (Metadata_GetUsersClient, error)
	ListProviders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Metadata_ListProvidersClient, error)
	CreateProvider(ctx context.Context, in *Provider, opts ...grpc.CallOption) (*Empty, error)
	GetProviders(ctx context.Context, opts ...grpc.CallOption) (Metadata_GetProvidersClient, error)
	ListEntities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Metadata_ListEntitiesClient, error)
	CreateEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Empty, error)
	GetEntities(ctx context.Context, opts ...grpc.CallOption) (Metadata_GetEntitiesClient, error)
	ListModels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Metadata_ListModelsClient, error)
	CreateModel(ctx context.Context, in *Model, opts ...grpc.CallOption) (*Empty, error)
	GetModels(ctx context.Context, opts ...grpc.CallOption) (Metadata_GetModelsClient, error)
	SetResourceStatus(ctx context.Context, in *SetStatusRequest, opts ...grpc.CallOption) (*Empty, error)
	SetResourceUpdateStatus(ctx context.Context, in *SetUpdateStatusRequest, opts ...grpc.CallOption) (*Empty, error)
	RequestScheduleChange(ctx context.Context, in *ScheduleChangeRequest, opts ...grpc.CallOption) (*Empty, error)
}

type metadataClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataClient(cc grpc.ClientConnInterface) MetadataClient {
	return &metadataClient{cc}
}

func (c *metadataClient) ListFeatures(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Metadata_ListFeaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Metadata_ServiceDesc.Streams[0], "/featureform.serving.metadata.proto.Metadata/ListFeatures", opts...)
	if err != nil {
		return nil, err
	}
	x := &metadataListFeaturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Metadata_ListFeaturesClient interface {
	Recv() (*Feature, error)
	grpc.ClientStream
}

type metadataListFeaturesClient struct {
	grpc.ClientStream
}

func (x *metadataListFeaturesClient) Recv() (*Feature, error) {
	m := new(Feature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metadataClient) CreateFeatureVariant(ctx context.Context, in *FeatureVariant, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/featureform.serving.metadata.proto.Metadata/CreateFeatureVariant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) GetFeatures(ctx context.Context, opts ...grpc.CallOption) (Metadata_GetFeaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Metadata_ServiceDesc.Streams[1], "/featureform.serving.metadata.proto.Metadata/GetFeatures", opts...)
	if err != nil {
		return nil, err
	}
	x := &metadataGetFeaturesClient{stream}
	return x, nil
}

type Metadata_GetFeaturesClient interface {
	Send(*Name) error
	Recv() (*Feature, error)
	grpc.ClientStream
}

type metadataGetFeaturesClient struct {
	grpc.ClientStream
}

func (x *metadataGetFeaturesClient) Send(m *Name) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metadataGetFeaturesClient) Recv() (*Feature, error) {
	m := new(Feature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metadataClient) GetFeatureVariants(ctx context.Context, opts ...grpc.CallOption) (Metadata_GetFeatureVariantsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Metadata_ServiceDesc.Streams[2], "/featureform.serving.metadata.proto.Metadata/GetFeatureVariants", opts...)
	if err != nil {
		return nil, err
	}
	x := &metadataGetFeatureVariantsClient{stream}
	return x, nil
}

type Metadata_GetFeatureVariantsClient interface {
	Send(*NameVariant) error
	Recv() (*FeatureVariant, error)
	grpc.ClientStream
}

type metadataGetFeatureVariantsClient struct {
	grpc.ClientStream
}

func (x *metadataGetFeatureVariantsClient) Send(m *NameVariant) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metadataGetFeatureVariantsClient) Recv() (*FeatureVariant, error) {
	m := new(FeatureVariant)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metadataClient) ListLabels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Metadata_ListLabelsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Metadata_ServiceDesc.Streams[3], "/featureform.serving.metadata.proto.Metadata/ListLabels", opts...)
	if err != nil {
		return nil, err
	}
	x := &metadataListLabelsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Metadata_ListLabelsClient interface {
	Recv() (*Label, error)
	grpc.ClientStream
}

type metadataListLabelsClient struct {
	grpc.ClientStream
}

func (x *metadataListLabelsClient) Recv() (*Label, error) {
	m := new(Label)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metadataClient) CreateLabelVariant(ctx context.Context, in *LabelVariant, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/featureform.serving.metadata.proto.Metadata/CreateLabelVariant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) GetLabels(ctx context.Context, opts ...grpc.CallOption) (Metadata_GetLabelsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Metadata_ServiceDesc.Streams[4], "/featureform.serving.metadata.proto.Metadata/GetLabels", opts...)
	if err != nil {
		return nil, err
	}
	x := &metadataGetLabelsClient{stream}
	return x, nil
}

type Metadata_GetLabelsClient interface {
	Send(*Name) error
	Recv() (*Label, error)
	grpc.ClientStream
}

type metadataGetLabelsClient struct {
	grpc.ClientStream
}

func (x *metadataGetLabelsClient) Send(m *Name) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metadataGetLabelsClient) Recv() (*Label, error) {
	m := new(Label)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metadataClient) GetLabelVariants(ctx context.Context, opts ...grpc.CallOption) (Metadata_GetLabelVariantsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Metadata_ServiceDesc.Streams[5], "/featureform.serving.metadata.proto.Metadata/GetLabelVariants", opts...)
	if err != nil {
		return nil, err
	}
	x := &metadataGetLabelVariantsClient{stream}
	return x, nil
}

type Metadata_GetLabelVariantsClient interface {
	Send(*NameVariant) error
	Recv() (*LabelVariant, error)
	grpc.ClientStream
}

type metadataGetLabelVariantsClient struct {
	grpc.ClientStream
}

func (x *metadataGetLabelVariantsClient) Send(m *NameVariant) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metadataGetLabelVariantsClient) Recv() (*LabelVariant, error) {
	m := new(LabelVariant)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metadataClient) ListTrainingSets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Metadata_ListTrainingSetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Metadata_ServiceDesc.Streams[6], "/featureform.serving.metadata.proto.Metadata/ListTrainingSets", opts...)
	if err != nil {
		return nil, err
	}
	x := &metadataListTrainingSetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Metadata_ListTrainingSetsClient interface {
	Recv() (*TrainingSet, error)
	grpc.ClientStream
}

type metadataListTrainingSetsClient struct {
	grpc.ClientStream
}

func (x *metadataListTrainingSetsClient) Recv() (*TrainingSet, error) {
	m := new(TrainingSet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metadataClient) CreateTrainingSetVariant(ctx context.Context, in *TrainingSetVariant, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/featureform.serving.metadata.proto.Metadata/CreateTrainingSetVariant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) GetTrainingSets(ctx context.Context, opts ...grpc.CallOption) (Metadata_GetTrainingSetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Metadata_ServiceDesc.Streams[7], "/featureform.serving.metadata.proto.Metadata/GetTrainingSets", opts...)
	if err != nil {
		return nil, err
	}
	x := &metadataGetTrainingSetsClient{stream}
	return x, nil
}

type Metadata_GetTrainingSetsClient interface {
	Send(*Name) error
	Recv() (*TrainingSet, error)
	grpc.ClientStream
}

type metadataGetTrainingSetsClient struct {
	grpc.ClientStream
}

func (x *metadataGetTrainingSetsClient) Send(m *Name) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metadataGetTrainingSetsClient) Recv() (*TrainingSet, error) {
	m := new(TrainingSet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metadataClient) GetTrainingSetVariants(ctx context.Context, opts ...grpc.CallOption) (Metadata_GetTrainingSetVariantsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Metadata_ServiceDesc.Streams[8], "/featureform.serving.metadata.proto.Metadata/GetTrainingSetVariants", opts...)
	if err != nil {
		return nil, err
	}
	x := &metadataGetTrainingSetVariantsClient{stream}
	return x, nil
}

type Metadata_GetTrainingSetVariantsClient interface {
	Send(*NameVariant) error
	Recv() (*TrainingSetVariant, error)
	grpc.ClientStream
}

type metadataGetTrainingSetVariantsClient struct {
	grpc.ClientStream
}

func (x *metadataGetTrainingSetVariantsClient) Send(m *NameVariant) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metadataGetTrainingSetVariantsClient) Recv() (*TrainingSetVariant, error) {
	m := new(TrainingSetVariant)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metadataClient) ListSources(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Metadata_ListSourcesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Metadata_ServiceDesc.Streams[9], "/featureform.serving.metadata.proto.Metadata/ListSources", opts...)
	if err != nil {
		return nil, err
	}
	x := &metadataListSourcesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Metadata_ListSourcesClient interface {
	Recv() (*Source, error)
	grpc.ClientStream
}

type metadataListSourcesClient struct {
	grpc.ClientStream
}

func (x *metadataListSourcesClient) Recv() (*Source, error) {
	m := new(Source)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metadataClient) CreateSourceVariant(ctx context.Context, in *SourceVariant, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/featureform.serving.metadata.proto.Metadata/CreateSourceVariant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) GetSources(ctx context.Context, opts ...grpc.CallOption) (Metadata_GetSourcesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Metadata_ServiceDesc.Streams[10], "/featureform.serving.metadata.proto.Metadata/GetSources", opts...)
	if err != nil {
		return nil, err
	}
	x := &metadataGetSourcesClient{stream}
	return x, nil
}

type Metadata_GetSourcesClient interface {
	Send(*Name) error
	Recv() (*Source, error)
	grpc.ClientStream
}

type metadataGetSourcesClient struct {
	grpc.ClientStream
}

func (x *metadataGetSourcesClient) Send(m *Name) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metadataGetSourcesClient) Recv() (*Source, error) {
	m := new(Source)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metadataClient) GetSourceVariants(ctx context.Context, opts ...grpc.CallOption) (Metadata_GetSourceVariantsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Metadata_ServiceDesc.Streams[11], "/featureform.serving.metadata.proto.Metadata/GetSourceVariants", opts...)
	if err != nil {
		return nil, err
	}
	x := &metadataGetSourceVariantsClient{stream}
	return x, nil
}

type Metadata_GetSourceVariantsClient interface {
	Send(*NameVariant) error
	Recv() (*SourceVariant, error)
	grpc.ClientStream
}

type metadataGetSourceVariantsClient struct {
	grpc.ClientStream
}

func (x *metadataGetSourceVariantsClient) Send(m *NameVariant) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metadataGetSourceVariantsClient) Recv() (*SourceVariant, error) {
	m := new(SourceVariant)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metadataClient) ListUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Metadata_ListUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Metadata_ServiceDesc.Streams[12], "/featureform.serving.metadata.proto.Metadata/ListUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &metadataListUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Metadata_ListUsersClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type metadataListUsersClient struct {
	grpc.ClientStream
}

func (x *metadataListUsersClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metadataClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/featureform.serving.metadata.proto.Metadata/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) GetUsers(ctx context.Context, opts ...grpc.CallOption) (Metadata_GetUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Metadata_ServiceDesc.Streams[13], "/featureform.serving.metadata.proto.Metadata/GetUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &metadataGetUsersClient{stream}
	return x, nil
}

type Metadata_GetUsersClient interface {
	Send(*Name) error
	Recv() (*User, error)
	grpc.ClientStream
}

type metadataGetUsersClient struct {
	grpc.ClientStream
}

func (x *metadataGetUsersClient) Send(m *Name) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metadataGetUsersClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metadataClient) ListProviders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Metadata_ListProvidersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Metadata_ServiceDesc.Streams[14], "/featureform.serving.metadata.proto.Metadata/ListProviders", opts...)
	if err != nil {
		return nil, err
	}
	x := &metadataListProvidersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Metadata_ListProvidersClient interface {
	Recv() (*Provider, error)
	grpc.ClientStream
}

type metadataListProvidersClient struct {
	grpc.ClientStream
}

func (x *metadataListProvidersClient) Recv() (*Provider, error) {
	m := new(Provider)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metadataClient) CreateProvider(ctx context.Context, in *Provider, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/featureform.serving.metadata.proto.Metadata/CreateProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) GetProviders(ctx context.Context, opts ...grpc.CallOption) (Metadata_GetProvidersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Metadata_ServiceDesc.Streams[15], "/featureform.serving.metadata.proto.Metadata/GetProviders", opts...)
	if err != nil {
		return nil, err
	}
	x := &metadataGetProvidersClient{stream}
	return x, nil
}

type Metadata_GetProvidersClient interface {
	Send(*Name) error
	Recv() (*Provider, error)
	grpc.ClientStream
}

type metadataGetProvidersClient struct {
	grpc.ClientStream
}

func (x *metadataGetProvidersClient) Send(m *Name) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metadataGetProvidersClient) Recv() (*Provider, error) {
	m := new(Provider)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metadataClient) ListEntities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Metadata_ListEntitiesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Metadata_ServiceDesc.Streams[16], "/featureform.serving.metadata.proto.Metadata/ListEntities", opts...)
	if err != nil {
		return nil, err
	}
	x := &metadataListEntitiesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Metadata_ListEntitiesClient interface {
	Recv() (*Entity, error)
	grpc.ClientStream
}

type metadataListEntitiesClient struct {
	grpc.ClientStream
}

func (x *metadataListEntitiesClient) Recv() (*Entity, error) {
	m := new(Entity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metadataClient) CreateEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/featureform.serving.metadata.proto.Metadata/CreateEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) GetEntities(ctx context.Context, opts ...grpc.CallOption) (Metadata_GetEntitiesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Metadata_ServiceDesc.Streams[17], "/featureform.serving.metadata.proto.Metadata/GetEntities", opts...)
	if err != nil {
		return nil, err
	}
	x := &metadataGetEntitiesClient{stream}
	return x, nil
}

type Metadata_GetEntitiesClient interface {
	Send(*Name) error
	Recv() (*Entity, error)
	grpc.ClientStream
}

type metadataGetEntitiesClient struct {
	grpc.ClientStream
}

func (x *metadataGetEntitiesClient) Send(m *Name) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metadataGetEntitiesClient) Recv() (*Entity, error) {
	m := new(Entity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metadataClient) ListModels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Metadata_ListModelsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Metadata_ServiceDesc.Streams[18], "/featureform.serving.metadata.proto.Metadata/ListModels", opts...)
	if err != nil {
		return nil, err
	}
	x := &metadataListModelsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Metadata_ListModelsClient interface {
	Recv() (*Model, error)
	grpc.ClientStream
}

type metadataListModelsClient struct {
	grpc.ClientStream
}

func (x *metadataListModelsClient) Recv() (*Model, error) {
	m := new(Model)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metadataClient) CreateModel(ctx context.Context, in *Model, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/featureform.serving.metadata.proto.Metadata/CreateModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) GetModels(ctx context.Context, opts ...grpc.CallOption) (Metadata_GetModelsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Metadata_ServiceDesc.Streams[19], "/featureform.serving.metadata.proto.Metadata/GetModels", opts...)
	if err != nil {
		return nil, err
	}
	x := &metadataGetModelsClient{stream}
	return x, nil
}

type Metadata_GetModelsClient interface {
	Send(*Name) error
	Recv() (*Model, error)
	grpc.ClientStream
}

type metadataGetModelsClient struct {
	grpc.ClientStream
}

func (x *metadataGetModelsClient) Send(m *Name) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metadataGetModelsClient) Recv() (*Model, error) {
	m := new(Model)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metadataClient) SetResourceStatus(ctx context.Context, in *SetStatusRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/featureform.serving.metadata.proto.Metadata/SetResourceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) SetResourceUpdateStatus(ctx context.Context, in *SetUpdateStatusRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/featureform.serving.metadata.proto.Metadata/SetResourceUpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) RequestScheduleChange(ctx context.Context, in *ScheduleChangeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/featureform.serving.metadata.proto.Metadata/RequestScheduleChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataServer is the server API for Metadata service.
// All implementations must embed UnimplementedMetadataServer
// for forward compatibility
type MetadataServer interface {
	ListFeatures(*Empty, Metadata_ListFeaturesServer) error
	CreateFeatureVariant(context.Context, *FeatureVariant) (*Empty, error)
	GetFeatures(Metadata_GetFeaturesServer) error
	GetFeatureVariants(Metadata_GetFeatureVariantsServer) error
	ListLabels(*Empty, Metadata_ListLabelsServer) error
	CreateLabelVariant(context.Context, *LabelVariant) (*Empty, error)
	GetLabels(Metadata_GetLabelsServer) error
	GetLabelVariants(Metadata_GetLabelVariantsServer) error
	ListTrainingSets(*Empty, Metadata_ListTrainingSetsServer) error
	CreateTrainingSetVariant(context.Context, *TrainingSetVariant) (*Empty, error)
	GetTrainingSets(Metadata_GetTrainingSetsServer) error
	GetTrainingSetVariants(Metadata_GetTrainingSetVariantsServer) error
	ListSources(*Empty, Metadata_ListSourcesServer) error
	CreateSourceVariant(context.Context, *SourceVariant) (*Empty, error)
	GetSources(Metadata_GetSourcesServer) error
	GetSourceVariants(Metadata_GetSourceVariantsServer) error
	ListUsers(*Empty, Metadata_ListUsersServer) error
	CreateUser(context.Context, *User) (*Empty, error)
	GetUsers(Metadata_GetUsersServer) error
	ListProviders(*Empty, Metadata_ListProvidersServer) error
	CreateProvider(context.Context, *Provider) (*Empty, error)
	GetProviders(Metadata_GetProvidersServer) error
	ListEntities(*Empty, Metadata_ListEntitiesServer) error
	CreateEntity(context.Context, *Entity) (*Empty, error)
	GetEntities(Metadata_GetEntitiesServer) error
	ListModels(*Empty, Metadata_ListModelsServer) error
	CreateModel(context.Context, *Model) (*Empty, error)
	GetModels(Metadata_GetModelsServer) error
	SetResourceStatus(context.Context, *SetStatusRequest) (*Empty, error)
	SetResourceUpdateStatus(context.Context, *SetUpdateStatusRequest) (*Empty, error)
	RequestScheduleChange(context.Context, *ScheduleChangeRequest) (*Empty, error)
	mustEmbedUnimplementedMetadataServer()
}

// UnimplementedMetadataServer must be embedded to have forward compatible implementations.
type UnimplementedMetadataServer struct {
}

func (UnimplementedMetadataServer) ListFeatures(*Empty, Metadata_ListFeaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFeatures not implemented")
}
func (UnimplementedMetadataServer) CreateFeatureVariant(context.Context, *FeatureVariant) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeatureVariant not implemented")
}
func (UnimplementedMetadataServer) GetFeatures(Metadata_GetFeaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFeatures not implemented")
}
func (UnimplementedMetadataServer) GetFeatureVariants(Metadata_GetFeatureVariantsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFeatureVariants not implemented")
}
func (UnimplementedMetadataServer) ListLabels(*Empty, Metadata_ListLabelsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListLabels not implemented")
}
func (UnimplementedMetadataServer) CreateLabelVariant(context.Context, *LabelVariant) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLabelVariant not implemented")
}
func (UnimplementedMetadataServer) GetLabels(Metadata_GetLabelsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLabels not implemented")
}
func (UnimplementedMetadataServer) GetLabelVariants(Metadata_GetLabelVariantsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLabelVariants not implemented")
}
func (UnimplementedMetadataServer) ListTrainingSets(*Empty, Metadata_ListTrainingSetsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTrainingSets not implemented")
}
func (UnimplementedMetadataServer) CreateTrainingSetVariant(context.Context, *TrainingSetVariant) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrainingSetVariant not implemented")
}
func (UnimplementedMetadataServer) GetTrainingSets(Metadata_GetTrainingSetsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTrainingSets not implemented")
}
func (UnimplementedMetadataServer) GetTrainingSetVariants(Metadata_GetTrainingSetVariantsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTrainingSetVariants not implemented")
}
func (UnimplementedMetadataServer) ListSources(*Empty, Metadata_ListSourcesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSources not implemented")
}
func (UnimplementedMetadataServer) CreateSourceVariant(context.Context, *SourceVariant) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSourceVariant not implemented")
}
func (UnimplementedMetadataServer) GetSources(Metadata_GetSourcesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSources not implemented")
}
func (UnimplementedMetadataServer) GetSourceVariants(Metadata_GetSourceVariantsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSourceVariants not implemented")
}
func (UnimplementedMetadataServer) ListUsers(*Empty, Metadata_ListUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedMetadataServer) CreateUser(context.Context, *User) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedMetadataServer) GetUsers(Metadata_GetUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedMetadataServer) ListProviders(*Empty, Metadata_ListProvidersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListProviders not implemented")
}
func (UnimplementedMetadataServer) CreateProvider(context.Context, *Provider) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProvider not implemented")
}
func (UnimplementedMetadataServer) GetProviders(Metadata_GetProvidersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProviders not implemented")
}
func (UnimplementedMetadataServer) ListEntities(*Empty, Metadata_ListEntitiesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListEntities not implemented")
}
func (UnimplementedMetadataServer) CreateEntity(context.Context, *Entity) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}
func (UnimplementedMetadataServer) GetEntities(Metadata_GetEntitiesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEntities not implemented")
}
func (UnimplementedMetadataServer) ListModels(*Empty, Metadata_ListModelsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedMetadataServer) CreateModel(context.Context, *Model) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModel not implemented")
}
func (UnimplementedMetadataServer) GetModels(Metadata_GetModelsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetModels not implemented")
}
func (UnimplementedMetadataServer) SetResourceStatus(context.Context, *SetStatusRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetResourceStatus not implemented")
}
func (UnimplementedMetadataServer) SetResourceUpdateStatus(context.Context, *SetUpdateStatusRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetResourceUpdateStatus not implemented")
}
func (UnimplementedMetadataServer) RequestScheduleChange(context.Context, *ScheduleChangeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestScheduleChange not implemented")
}
func (UnimplementedMetadataServer) mustEmbedUnimplementedMetadataServer() {}

// UnsafeMetadataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetadataServer will
// result in compilation errors.
type UnsafeMetadataServer interface {
	mustEmbedUnimplementedMetadataServer()
}

func RegisterMetadataServer(s grpc.ServiceRegistrar, srv MetadataServer) {
	s.RegisterService(&Metadata_ServiceDesc, srv)
}

func _Metadata_ListFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetadataServer).ListFeatures(m, &metadataListFeaturesServer{stream})
}

type Metadata_ListFeaturesServer interface {
	Send(*Feature) error
	grpc.ServerStream
}

type metadataListFeaturesServer struct {
	grpc.ServerStream
}

func (x *metadataListFeaturesServer) Send(m *Feature) error {
	return x.ServerStream.SendMsg(m)
}

func _Metadata_CreateFeatureVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureVariant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).CreateFeatureVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureform.serving.metadata.proto.Metadata/CreateFeatureVariant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).CreateFeatureVariant(ctx, req.(*FeatureVariant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_GetFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetadataServer).GetFeatures(&metadataGetFeaturesServer{stream})
}

type Metadata_GetFeaturesServer interface {
	Send(*Feature) error
	Recv() (*Name, error)
	grpc.ServerStream
}

type metadataGetFeaturesServer struct {
	grpc.ServerStream
}

func (x *metadataGetFeaturesServer) Send(m *Feature) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metadataGetFeaturesServer) Recv() (*Name, error) {
	m := new(Name)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Metadata_GetFeatureVariants_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetadataServer).GetFeatureVariants(&metadataGetFeatureVariantsServer{stream})
}

type Metadata_GetFeatureVariantsServer interface {
	Send(*FeatureVariant) error
	Recv() (*NameVariant, error)
	grpc.ServerStream
}

type metadataGetFeatureVariantsServer struct {
	grpc.ServerStream
}

func (x *metadataGetFeatureVariantsServer) Send(m *FeatureVariant) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metadataGetFeatureVariantsServer) Recv() (*NameVariant, error) {
	m := new(NameVariant)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Metadata_ListLabels_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetadataServer).ListLabels(m, &metadataListLabelsServer{stream})
}

type Metadata_ListLabelsServer interface {
	Send(*Label) error
	grpc.ServerStream
}

type metadataListLabelsServer struct {
	grpc.ServerStream
}

func (x *metadataListLabelsServer) Send(m *Label) error {
	return x.ServerStream.SendMsg(m)
}

func _Metadata_CreateLabelVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelVariant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).CreateLabelVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureform.serving.metadata.proto.Metadata/CreateLabelVariant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).CreateLabelVariant(ctx, req.(*LabelVariant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_GetLabels_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetadataServer).GetLabels(&metadataGetLabelsServer{stream})
}

type Metadata_GetLabelsServer interface {
	Send(*Label) error
	Recv() (*Name, error)
	grpc.ServerStream
}

type metadataGetLabelsServer struct {
	grpc.ServerStream
}

func (x *metadataGetLabelsServer) Send(m *Label) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metadataGetLabelsServer) Recv() (*Name, error) {
	m := new(Name)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Metadata_GetLabelVariants_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetadataServer).GetLabelVariants(&metadataGetLabelVariantsServer{stream})
}

type Metadata_GetLabelVariantsServer interface {
	Send(*LabelVariant) error
	Recv() (*NameVariant, error)
	grpc.ServerStream
}

type metadataGetLabelVariantsServer struct {
	grpc.ServerStream
}

func (x *metadataGetLabelVariantsServer) Send(m *LabelVariant) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metadataGetLabelVariantsServer) Recv() (*NameVariant, error) {
	m := new(NameVariant)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Metadata_ListTrainingSets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetadataServer).ListTrainingSets(m, &metadataListTrainingSetsServer{stream})
}

type Metadata_ListTrainingSetsServer interface {
	Send(*TrainingSet) error
	grpc.ServerStream
}

type metadataListTrainingSetsServer struct {
	grpc.ServerStream
}

func (x *metadataListTrainingSetsServer) Send(m *TrainingSet) error {
	return x.ServerStream.SendMsg(m)
}

func _Metadata_CreateTrainingSetVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingSetVariant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).CreateTrainingSetVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureform.serving.metadata.proto.Metadata/CreateTrainingSetVariant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).CreateTrainingSetVariant(ctx, req.(*TrainingSetVariant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_GetTrainingSets_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetadataServer).GetTrainingSets(&metadataGetTrainingSetsServer{stream})
}

type Metadata_GetTrainingSetsServer interface {
	Send(*TrainingSet) error
	Recv() (*Name, error)
	grpc.ServerStream
}

type metadataGetTrainingSetsServer struct {
	grpc.ServerStream
}

func (x *metadataGetTrainingSetsServer) Send(m *TrainingSet) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metadataGetTrainingSetsServer) Recv() (*Name, error) {
	m := new(Name)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Metadata_GetTrainingSetVariants_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetadataServer).GetTrainingSetVariants(&metadataGetTrainingSetVariantsServer{stream})
}

type Metadata_GetTrainingSetVariantsServer interface {
	Send(*TrainingSetVariant) error
	Recv() (*NameVariant, error)
	grpc.ServerStream
}

type metadataGetTrainingSetVariantsServer struct {
	grpc.ServerStream
}

func (x *metadataGetTrainingSetVariantsServer) Send(m *TrainingSetVariant) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metadataGetTrainingSetVariantsServer) Recv() (*NameVariant, error) {
	m := new(NameVariant)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Metadata_ListSources_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetadataServer).ListSources(m, &metadataListSourcesServer{stream})
}

type Metadata_ListSourcesServer interface {
	Send(*Source) error
	grpc.ServerStream
}

type metadataListSourcesServer struct {
	grpc.ServerStream
}

func (x *metadataListSourcesServer) Send(m *Source) error {
	return x.ServerStream.SendMsg(m)
}

func _Metadata_CreateSourceVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceVariant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).CreateSourceVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureform.serving.metadata.proto.Metadata/CreateSourceVariant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).CreateSourceVariant(ctx, req.(*SourceVariant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_GetSources_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetadataServer).GetSources(&metadataGetSourcesServer{stream})
}

type Metadata_GetSourcesServer interface {
	Send(*Source) error
	Recv() (*Name, error)
	grpc.ServerStream
}

type metadataGetSourcesServer struct {
	grpc.ServerStream
}

func (x *metadataGetSourcesServer) Send(m *Source) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metadataGetSourcesServer) Recv() (*Name, error) {
	m := new(Name)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Metadata_GetSourceVariants_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetadataServer).GetSourceVariants(&metadataGetSourceVariantsServer{stream})
}

type Metadata_GetSourceVariantsServer interface {
	Send(*SourceVariant) error
	Recv() (*NameVariant, error)
	grpc.ServerStream
}

type metadataGetSourceVariantsServer struct {
	grpc.ServerStream
}

func (x *metadataGetSourceVariantsServer) Send(m *SourceVariant) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metadataGetSourceVariantsServer) Recv() (*NameVariant, error) {
	m := new(NameVariant)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Metadata_ListUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetadataServer).ListUsers(m, &metadataListUsersServer{stream})
}

type Metadata_ListUsersServer interface {
	Send(*User) error
	grpc.ServerStream
}

type metadataListUsersServer struct {
	grpc.ServerStream
}

func (x *metadataListUsersServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _Metadata_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureform.serving.metadata.proto.Metadata/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_GetUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetadataServer).GetUsers(&metadataGetUsersServer{stream})
}

type Metadata_GetUsersServer interface {
	Send(*User) error
	Recv() (*Name, error)
	grpc.ServerStream
}

type metadataGetUsersServer struct {
	grpc.ServerStream
}

func (x *metadataGetUsersServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metadataGetUsersServer) Recv() (*Name, error) {
	m := new(Name)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Metadata_ListProviders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetadataServer).ListProviders(m, &metadataListProvidersServer{stream})
}

type Metadata_ListProvidersServer interface {
	Send(*Provider) error
	grpc.ServerStream
}

type metadataListProvidersServer struct {
	grpc.ServerStream
}

func (x *metadataListProvidersServer) Send(m *Provider) error {
	return x.ServerStream.SendMsg(m)
}

func _Metadata_CreateProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Provider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).CreateProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureform.serving.metadata.proto.Metadata/CreateProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).CreateProvider(ctx, req.(*Provider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_GetProviders_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetadataServer).GetProviders(&metadataGetProvidersServer{stream})
}

type Metadata_GetProvidersServer interface {
	Send(*Provider) error
	Recv() (*Name, error)
	grpc.ServerStream
}

type metadataGetProvidersServer struct {
	grpc.ServerStream
}

func (x *metadataGetProvidersServer) Send(m *Provider) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metadataGetProvidersServer) Recv() (*Name, error) {
	m := new(Name)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Metadata_ListEntities_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetadataServer).ListEntities(m, &metadataListEntitiesServer{stream})
}

type Metadata_ListEntitiesServer interface {
	Send(*Entity) error
	grpc.ServerStream
}

type metadataListEntitiesServer struct {
	grpc.ServerStream
}

func (x *metadataListEntitiesServer) Send(m *Entity) error {
	return x.ServerStream.SendMsg(m)
}

func _Metadata_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureform.serving.metadata.proto.Metadata/CreateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).CreateEntity(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_GetEntities_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetadataServer).GetEntities(&metadataGetEntitiesServer{stream})
}

type Metadata_GetEntitiesServer interface {
	Send(*Entity) error
	Recv() (*Name, error)
	grpc.ServerStream
}

type metadataGetEntitiesServer struct {
	grpc.ServerStream
}

func (x *metadataGetEntitiesServer) Send(m *Entity) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metadataGetEntitiesServer) Recv() (*Name, error) {
	m := new(Name)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Metadata_ListModels_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetadataServer).ListModels(m, &metadataListModelsServer{stream})
}

type Metadata_ListModelsServer interface {
	Send(*Model) error
	grpc.ServerStream
}

type metadataListModelsServer struct {
	grpc.ServerStream
}

func (x *metadataListModelsServer) Send(m *Model) error {
	return x.ServerStream.SendMsg(m)
}

func _Metadata_CreateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Model)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).CreateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureform.serving.metadata.proto.Metadata/CreateModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).CreateModel(ctx, req.(*Model))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_GetModels_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetadataServer).GetModels(&metadataGetModelsServer{stream})
}

type Metadata_GetModelsServer interface {
	Send(*Model) error
	Recv() (*Name, error)
	grpc.ServerStream
}

type metadataGetModelsServer struct {
	grpc.ServerStream
}

func (x *metadataGetModelsServer) Send(m *Model) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metadataGetModelsServer) Recv() (*Name, error) {
	m := new(Name)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Metadata_SetResourceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).SetResourceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureform.serving.metadata.proto.Metadata/SetResourceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).SetResourceStatus(ctx, req.(*SetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_SetResourceUpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).SetResourceUpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureform.serving.metadata.proto.Metadata/SetResourceUpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).SetResourceUpdateStatus(ctx, req.(*SetUpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_RequestScheduleChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).RequestScheduleChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureform.serving.metadata.proto.Metadata/RequestScheduleChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).RequestScheduleChange(ctx, req.(*ScheduleChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Metadata_ServiceDesc is the grpc.ServiceDesc for Metadata service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Metadata_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "featureform.serving.metadata.proto.Metadata",
	HandlerType: (*MetadataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFeatureVariant",
			Handler:    _Metadata_CreateFeatureVariant_Handler,
		},
		{
			MethodName: "CreateLabelVariant",
			Handler:    _Metadata_CreateLabelVariant_Handler,
		},
		{
			MethodName: "CreateTrainingSetVariant",
			Handler:    _Metadata_CreateTrainingSetVariant_Handler,
		},
		{
			MethodName: "CreateSourceVariant",
			Handler:    _Metadata_CreateSourceVariant_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Metadata_CreateUser_Handler,
		},
		{
			MethodName: "CreateProvider",
			Handler:    _Metadata_CreateProvider_Handler,
		},
		{
			MethodName: "CreateEntity",
			Handler:    _Metadata_CreateEntity_Handler,
		},
		{
			MethodName: "CreateModel",
			Handler:    _Metadata_CreateModel_Handler,
		},
		{
			MethodName: "SetResourceStatus",
			Handler:    _Metadata_SetResourceStatus_Handler,
		},
		{
			MethodName: "SetResourceUpdateStatus",
			Handler:    _Metadata_SetResourceUpdateStatus_Handler,
		},
		{
			MethodName: "RequestScheduleChange",
			Handler:    _Metadata_RequestScheduleChange_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFeatures",
			Handler:       _Metadata_ListFeatures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetFeatures",
			Handler:       _Metadata_GetFeatures_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFeatureVariants",
			Handler:       _Metadata_GetFeatureVariants_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ListLabels",
			Handler:       _Metadata_ListLabels_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetLabels",
			Handler:       _Metadata_GetLabels_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetLabelVariants",
			Handler:       _Metadata_GetLabelVariants_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ListTrainingSets",
			Handler:       _Metadata_ListTrainingSets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTrainingSets",
			Handler:       _Metadata_GetTrainingSets_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetTrainingSetVariants",
			Handler:       _Metadata_GetTrainingSetVariants_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ListSources",
			Handler:       _Metadata_ListSources_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSources",
			Handler:       _Metadata_GetSources_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetSourceVariants",
			Handler:       _Metadata_GetSourceVariants_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ListUsers",
			Handler:       _Metadata_ListUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUsers",
			Handler:       _Metadata_GetUsers_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ListProviders",
			Handler:       _Metadata_ListProviders_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetProviders",
			Handler:       _Metadata_GetProviders_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ListEntities",
			Handler:       _Metadata_ListEntities_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetEntities",
			Handler:       _Metadata_GetEntities_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ListModels",
			Handler:       _Metadata_ListModels_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetModels",
			Handler:       _Metadata_GetModels_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "metadata/proto/metadata.proto",
}

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiClient interface {
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error)
	CreateProvider(ctx context.Context, in *Provider, opts ...grpc.CallOption) (*Empty, error)
	CreateSourceVariant(ctx context.Context, in *SourceVariant, opts ...grpc.CallOption) (*Empty, error)
	CreateEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Empty, error)
	CreateFeatureVariant(ctx context.Context, in *FeatureVariant, opts ...grpc.CallOption) (*Empty, error)
	CreateLabelVariant(ctx context.Context, in *LabelVariant, opts ...grpc.CallOption) (*Empty, error)
	CreateTrainingSetVariant(ctx context.Context, in *TrainingSetVariant, opts ...grpc.CallOption) (*Empty, error)
	RequestScheduleChange(ctx context.Context, in *ScheduleChangeRequest, opts ...grpc.CallOption) (*Empty, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/featureform.serving.metadata.proto.Api/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) CreateProvider(ctx context.Context, in *Provider, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/featureform.serving.metadata.proto.Api/CreateProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) CreateSourceVariant(ctx context.Context, in *SourceVariant, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/featureform.serving.metadata.proto.Api/CreateSourceVariant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) CreateEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/featureform.serving.metadata.proto.Api/CreateEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) CreateFeatureVariant(ctx context.Context, in *FeatureVariant, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/featureform.serving.metadata.proto.Api/CreateFeatureVariant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) CreateLabelVariant(ctx context.Context, in *LabelVariant, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/featureform.serving.metadata.proto.Api/CreateLabelVariant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) CreateTrainingSetVariant(ctx context.Context, in *TrainingSetVariant, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/featureform.serving.metadata.proto.Api/CreateTrainingSetVariant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) RequestScheduleChange(ctx context.Context, in *ScheduleChangeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/featureform.serving.metadata.proto.Api/RequestScheduleChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServer is the server API for Api service.
// All implementations must embed UnimplementedApiServer
// for forward compatibility
type ApiServer interface {
	CreateUser(context.Context, *User) (*Empty, error)
	CreateProvider(context.Context, *Provider) (*Empty, error)
	CreateSourceVariant(context.Context, *SourceVariant) (*Empty, error)
	CreateEntity(context.Context, *Entity) (*Empty, error)
	CreateFeatureVariant(context.Context, *FeatureVariant) (*Empty, error)
	CreateLabelVariant(context.Context, *LabelVariant) (*Empty, error)
	CreateTrainingSetVariant(context.Context, *TrainingSetVariant) (*Empty, error)
	RequestScheduleChange(context.Context, *ScheduleChangeRequest) (*Empty, error)
	mustEmbedUnimplementedApiServer()
}

// UnimplementedApiServer must be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (UnimplementedApiServer) CreateUser(context.Context, *User) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedApiServer) CreateProvider(context.Context, *Provider) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProvider not implemented")
}
func (UnimplementedApiServer) CreateSourceVariant(context.Context, *SourceVariant) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSourceVariant not implemented")
}
func (UnimplementedApiServer) CreateEntity(context.Context, *Entity) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}
func (UnimplementedApiServer) CreateFeatureVariant(context.Context, *FeatureVariant) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeatureVariant not implemented")
}
func (UnimplementedApiServer) CreateLabelVariant(context.Context, *LabelVariant) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLabelVariant not implemented")
}
func (UnimplementedApiServer) CreateTrainingSetVariant(context.Context, *TrainingSetVariant) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrainingSetVariant not implemented")
}
func (UnimplementedApiServer) RequestScheduleChange(context.Context, *ScheduleChangeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestScheduleChange not implemented")
}
func (UnimplementedApiServer) mustEmbedUnimplementedApiServer() {}

// UnsafeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServer will
// result in compilation errors.
type UnsafeApiServer interface {
	mustEmbedUnimplementedApiServer()
}

func RegisterApiServer(s grpc.ServiceRegistrar, srv ApiServer) {
	s.RegisterService(&Api_ServiceDesc, srv)
}

func _Api_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureform.serving.metadata.proto.Api/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_CreateProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Provider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).CreateProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureform.serving.metadata.proto.Api/CreateProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).CreateProvider(ctx, req.(*Provider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_CreateSourceVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceVariant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).CreateSourceVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureform.serving.metadata.proto.Api/CreateSourceVariant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).CreateSourceVariant(ctx, req.(*SourceVariant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureform.serving.metadata.proto.Api/CreateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).CreateEntity(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_CreateFeatureVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureVariant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).CreateFeatureVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureform.serving.metadata.proto.Api/CreateFeatureVariant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).CreateFeatureVariant(ctx, req.(*FeatureVariant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_CreateLabelVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelVariant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).CreateLabelVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureform.serving.metadata.proto.Api/CreateLabelVariant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).CreateLabelVariant(ctx, req.(*LabelVariant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_CreateTrainingSetVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingSetVariant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).CreateTrainingSetVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureform.serving.metadata.proto.Api/CreateTrainingSetVariant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).CreateTrainingSetVariant(ctx, req.(*TrainingSetVariant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_RequestScheduleChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).RequestScheduleChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/featureform.serving.metadata.proto.Api/RequestScheduleChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).RequestScheduleChange(ctx, req.(*ScheduleChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Api_ServiceDesc is the grpc.ServiceDesc for Api service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Api_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "featureform.serving.metadata.proto.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Api_CreateUser_Handler,
		},
		{
			MethodName: "CreateProvider",
			Handler:    _Api_CreateProvider_Handler,
		},
		{
			MethodName: "CreateSourceVariant",
			Handler:    _Api_CreateSourceVariant_Handler,
		},
		{
			MethodName: "CreateEntity",
			Handler:    _Api_CreateEntity_Handler,
		},
		{
			MethodName: "CreateFeatureVariant",
			Handler:    _Api_CreateFeatureVariant_Handler,
		},
		{
			MethodName: "CreateLabelVariant",
			Handler:    _Api_CreateLabelVariant_Handler,
		},
		{
			MethodName: "CreateTrainingSetVariant",
			Handler:    _Api_CreateTrainingSetVariant_Handler,
		},
		{
			MethodName: "RequestScheduleChange",
			Handler:    _Api_RequestScheduleChange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metadata/proto/metadata.proto",
}
