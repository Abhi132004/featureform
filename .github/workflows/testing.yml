name: Testing
on: [push, pull_request]

env:
  TYPESENSE_PORT: 8108
  TYPESENSE_API_KEY: "xyz"
  REDIS_PORT: 6379
  POSTGRES_USER: "username"
  POSTGRES_DB: "default"
  POSTGRES_PASSWORD: "password"


jobs:
  setup:
    name: Setup Test Dependencies
    defaults:
      run:
        working-directory: ./ff/serving
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Install grpc_tools
        run: pip install grpcio-tools

      - name: Install Protobuf
        run: sudo snap install protobuf --classic

      - name: Setup Proto
        run: ./gen_grpc.sh

      - name: Build
        run: go build

      - uses: actions/upload-artifact@v3
        with:
          name: compiled-workdir
          path: ./ff/serving/
          retention-days: 1

  typesense:
    name: Typesense Testing
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Download Working Compiled Directories
        uses: actions/download-artifact@v3
        with:
          name: compiled-workdir

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      # Installing Typesense manually b/c the base container uses input arguments that
      # Github Actions currently doesn't support (e.g. --data-dir, --api-key, --enable-cores).
      # Can create a custom Typesense container in the future if desired
      - name: Install Typesense Container
        run: docker pull typesense/typesense:0.22.2

      - name: Start Typesense
        run: |
          mkdir /tmp/typesense-data
          docker run -d -p $TYPESENSE_PORT:8108 -v/tmp/typesense-data:/data typesense/typesense:0.22.2 \
          --data-dir /data --api-key=$TYPESENSE_API_KEY --enable-cors

      - name: Make Coverage Directory
        working-directory: ./metadata/search
        run: mkdir coverage

      - name: Testing
        working-directory: ./metadata/search
        run: go test -v -coverpkg=./... -coverprofile coverage/cover.out ./...

      - name: Convert Coverage Test Results
        if: always()
        working-directory: ./metadata/search/coverage
        run: go tool cover -html=cover.out -o cover.html

      - uses: codecov/codecov-action@v2
        if: always()
        with:
          root_dir: ./
          files: ./metadata/search/coverage/cover.out
          name: typesense-coverage
          verbose: true

      - name: Archive code coverage results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: typesense-coverage-reports
          path: ./metadata/search/coverage

  provider:
    name: Provider Testing
    needs: setup
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        # Hard coded port because environment variables not currently
        # supported for use outside of 'steps'
        ports:
          -  6379:6379

      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_DB:  ${{ env.POSTGRES_DB }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}

    steps:
      - name: Download Working Compiled Directories
        uses: actions/download-artifact@v3
        with:
          name: compiled-workdir

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Make Coverage Directory
        working-directory: ./provider
        run: mkdir coverage

      - name: Testing
        working-directory: ./provider
        run: go test -v -coverpkg=./... -coverprofile coverage/cover.out ./...

      - name: Convert Coverage Test Results
        if: always()
        working-directory: ./provider/coverage
        run: go tool cover -html=cover.out -o cover.html

      - uses: codecov/codecov-action@v2
        if: always()
        with:
          root_dir: ./
          files: ./provider/coverage/cover.out
          name: provider-coverage
          verbose: true

      - name: Archive code coverage results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: provider-coverage-reports
          path: ./provider/coverage

  etcd:
    name: ETCD Testing
    needs: setup
    runs-on: ubuntu-latest

    steps:
      - name: Download Working Compiled Directories
        uses: actions/download-artifact@v3
        with:
          name: compiled-workdir

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Install ETCD
        run: |
          git clone -b v3.4.16 https://github.com/etcd-io/etcd.git
          cd etcd
          ./build
          export PATH="$PATH:`pwd`/bin"
          etcd --version
          etcd --logger=zap &

      - name: Make Coverage Directory
        working-directory: ./metadata
        run: mkdir coverage

      - name: Testing
        working-directory: ./metadata
        run: go test -v -coverpkg=./... -coverprofile coverage/cover.out

      - name: Convert Coverage Test Results
        if: always()
        working-directory: ./metadata/coverage
        run: go tool cover -html=cover.out -o cover.html

      - uses: codecov/codecov-action@v2
        if: always()
        with:
          root_dir: ./
          files: ./metadata/coverage/cover.out
          name: etcd-coverage
          verbose: true

  metrics:
    name: Metrics Testing
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Download Working Compiled Directories
        uses: actions/download-artifact@v3
        with:
          name: compiled-workdir

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Make Coverage Directory
        working-directory: ./metrics
        run: mkdir coverage

      - name: Testing
        working-directory: ./metrics
        run: go test ./... -v -coverpkg=./... -coverprofile coverage/cover.out ./...

      - name: Convert Coverage Test Results
        if: always()
        working-directory: ./metrics/coverage
        run: go tool cover -html=cover.out -o cover.html

      - uses: codecov/codecov-action@v2
        if: always()
        with:
          root_dir: ./
          files: ./metrics/coverage/cover.out
          name: metrics-coverage
          verbose: true

      - name: Archive code coverage results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: metrics-coverage-reports
          path: ./metrics/coverage

  runner:
    name: Runner Testing
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Download Working Compiled Directories
        uses: actions/download-artifact@v3
        with:
          name: compiled-workdir

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Make Coverage Directory
        working-directory: ./runner
        run: mkdir coverage

      - name: Testing
        working-directory: ./runner
        run: go test ./... -v -coverpkg=./... -coverprofile coverage/cover.out ./...

      - name: Convert Coverage Test Results
        if: always()
        working-directory: ./runner/coverage
        run: go tool cover -html=cover.out -o cover.html

      - uses: codecov/codecov-action@v2
        if: always()
        with:
          root_dir: ./
          files: ./runner/coverage/cover.out
          name: runner-coverage
          verbose: true

      - name: Archive code coverage results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: runner-coverage-reports
          path: ./runner/coverage

#  coverage:
#    if: always()
#    name: Upload Coverage
#    needs: [typesense, provider, metrics, runner]
#    defaults:
#      run:
#        working-directory: ./
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Download Working Compiled Directories
#        uses: actions/download-artifact@v3
#        with:
#          name: metrics-coverage-reports,provider-coverage-reports,runner-coverage-reports,typesense-coverage-reports
#          path: ./ff/serving
#
#      - name: Display structure of downloaded files
#        run: ls -R
#
#      - uses: codecov/codecov-action@v2
#        with:
#          root_dir: ./ff/serving/
#          files: ./metrics-coverage-reports/cover.out,./provider-coverage-reports/cover.out,./runner-coverage-reports/cover.out,./typesense-coverage-reports/cover.out
#          name: coverage-upload
#          verbose: true

